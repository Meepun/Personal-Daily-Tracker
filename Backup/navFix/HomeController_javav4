package com.tracker.calendartracker;

import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.HPos;
import javafx.geometry.Pos;
import javafx.geometry.VPos;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.*;
import java.time.LocalDate;
import java.time.Month;
import java.util.*;
import java.util.stream.Collectors;

public class HomeController {

    @FXML private ComboBox<Integer> yearDropdown;
    @FXML private ListView<String> monthListView;
    @FXML private TabPane tabPane;
    @FXML private Label monthLabel;
    @FXML private Button createNewTrackerButton;
    @FXML public  Button deleteTrackerButton;
    @FXML private Label welcomeLabel;

    private int userId;
    private LocalDate currentMonth = LocalDate.now();
    private LocalDate today = LocalDate.now();
    private Map<Tab, Tracker> trackerMap = new HashMap<>();


    private static final String BASE_PATH = "/images/";
    private static final String CHECKED_IMAGE_PATH = "Check.png";
    private static final String CROSSED_IMAGE_PATH = "X.png";

    @FXML
    private void initialize() {
        // Retrieve userId from the session
        this.userId = SessionHandler.getInstance().getUserId();

        // Retrieve the username from your database or session
        String username = getUserNameFromDatabase(String.valueOf(userId));

        // Set the label text dynamically
        welcomeLabel.setText("Welcome, " + username);

        currentMonth = today.withDayOfMonth(1);

        monthListView.setItems(FXCollections.observableArrayList(
                "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE",
                "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"
        ));

        // Apply styling to the ListView
        monthListView.setStyle(
                "-fx-background-color: orange;" +        // Set background color for the list
                        "-fx-text-fill: white;" +               // Set text color
                        "-fx-font-weight: bold;" +              // Make text bold
                        "-fx-selection-bar: orange;" +          // Set selected item's background color
                        "-fx-selection-bar-text: white;"        // Set selected item's text color
        );

        // Add listener to handle month selection changes
        monthListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null) {
                updateCalendar(newValue);
            }
        });

        yearDropdown.setOnMouseClicked(this::handleMonthYearSelection);

        // Initialize the calendar with the current month
        updateCalendar(currentMonth.getMonth().toString());

        // Handle create new tracker button
        createNewTrackerButton.setOnAction(this::handleCreateNewTracker);
        deleteTrackerButton.setOnAction(this::handleDeleteTracker);

        initializeYearDropdown();
        initializeMonthListView();

        // Load the first tracker after login/signup
        loadUserTrackers();

        // Add double-click event listener to the tabs
        tabPane.setOnMouseClicked(event -> {
            if (event.getClickCount() == 2) {  // Check if it's a double click
                Tab selectedTab = tabPane.getSelectionModel().getSelectedItem();  // Get the tab that was double-clicked
                if (selectedTab != null) {
                    handleRenameTracker(selectedTab);  // Rename the selected tab's tracker
                }
            }
        });
    }

    // Initialize the year dropdown
    private void initializeYearDropdown() {
        int currentYear = currentMonth.getYear();
        List<Integer> years = new ArrayList<>();
        for (int year = currentYear - 25; year <= currentYear + 50; year++) {
            years.add(year);
        }
        yearDropdown.setItems(FXCollections.observableArrayList(years));
        yearDropdown.setValue(currentYear);
        yearDropdown.setOnAction(this::handleYearSelection);
    }

    // Set up the month list and load initial tracker tabs
    private void initializeMonthListView() {
        List<String> months = Arrays.asList("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
        monthListView.setItems(FXCollections.observableArrayList(months));
    }

    private void loadUserTrackers() {
        // Clear existing tabs
        tabPane.getTabs().clear();

        // Load trackers from the database
        List<Tracker> trackers = Tracker.getUserTrackers(userId);

        // Debug log to check if trackers are loaded correctly
        System.out.println("Loaded " + trackers.size() + " trackers.");

        // Add each tracker as a new tab
        for (Tracker tracker : trackers) {
            if (tracker != null) {
                addTrackerTab(tracker);
            } else {
                System.out.println("Warning: Tracker is null. Skipping.");
            }
        }
    }

    private void addTrackerTab(Tracker tracker) {
        // Create a new tab for the tracker
        Tab tab = new Tab(tracker.getTrackerName());

        // Set the tracker as the tab's user data to associate it with the tab
        tab.setUserData(tracker);

        // Create a new navigation bar for the tab
        AnchorPane tabNavBar = createTabNavBar(tracker);

        // Create the calendar content for this tab
        AnchorPane calendarContent = createCalendarContent(tracker);

        // Create an AnchorPane to hold both the nav bar and the calendar content
        AnchorPane tabContent = new AnchorPane();

        // Position the navigation bar at the top of the tab content
        AnchorPane.setTopAnchor(tabNavBar, 0.0);
        AnchorPane.setLeftAnchor(tabNavBar, 0.0);
        AnchorPane.setRightAnchor(tabNavBar, 0.0);

        // Position the calendar content below the navigation bar
        AnchorPane.setTopAnchor(calendarContent, 50.0);
        AnchorPane.setLeftAnchor(calendarContent, 0.0);
        AnchorPane.setRightAnchor(calendarContent, 0.0);

        // Add both the nav bar and the calendar content to the tab content
        tabContent.getChildren().addAll(tabNavBar, calendarContent);

        // Set the content of the tab
        tab.setContent(tabContent);

        // Add the tab to the TabPane
        tabPane.getTabs().add(tab);

        // Add double-click rename listener
        tabContent.setOnMouseClicked(event -> {
            if (event.getClickCount() == 2) {
                handleRenameTracker(tab);
            }
        });
    }

    private AnchorPane createTabNavBar(Tracker tracker) {
        AnchorPane navBar = new AnchorPane();

        Label monthLabel = new Label(tracker.getCurrentMonth().getMonth().name() + " " + tracker.getCurrentMonth().getYear());

        navBar.getChildren().addAll(monthLabel);
        return navBar;
    }

    private AnchorPane createCalendarContent(Tracker tracker) {
        AnchorPane calendarPane = new AnchorPane();

        // Check if tracker is null
        if (tracker == null) {
            System.err.println("Error: Tracker is null. Unable to create calendar content.");
            return calendarPane; // Return an empty calendar pane or handle the error as needed
        }

        // Proceed with normal calendar creation logic
        // Create a GridPane for the calendar
        GridPane calendarGrid = new GridPane();
        calendarGrid.setLayoutX(3.0);
        calendarGrid.setLayoutY(14.0);
        calendarGrid.setHgap(10);
        calendarGrid.setVgap(10);
        calendarGrid.getStyleClass().add("calendar-grid");
        calendarGrid.setPrefSize(525.0, 374.0);
        calendarGrid.setAlignment(Pos.TOP_CENTER);

        // Add the row for the days of the week (Sun, Mon, Tue, Wed, Thu, Fri, Sat)
        String[] daysOfWeek = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
        for (int i = 0; i < daysOfWeek.length; i++) {
            Label dayLabel = new Label(daysOfWeek[i]);
            dayLabel.getStyleClass().add("calendar-header");
            GridPane.setHalignment(dayLabel, HPos.CENTER);
            GridPane.setValignment(dayLabel, VPos.CENTER);
            calendarGrid.add(dayLabel, i, 0);
        }

        // Get the first day of the month
        LocalDate firstOfMonth = LocalDate.of(currentMonth.getYear(), currentMonth.getMonth(), 1);
        int firstDayOfWeek = firstOfMonth.getDayOfWeek().getValue();
        if (firstDayOfWeek == 7) { // If Sunday is the first day
            firstDayOfWeek = 0; // Adjust for Sunday
        }

        int lengthOfMonth = firstOfMonth.lengthOfMonth();

        // Loop through the days of the month and add buttons
        for (int day = 1; day <= lengthOfMonth; day++) {
            int row = (firstDayOfWeek + day - 1) / 7 + 1;
            int col = (firstDayOfWeek + day - 1) % 7;

            Button dayButton = new Button(String.valueOf(day));
            dayButton.setPrefSize(45, 45);
            dayButton.setId(String.valueOf(day)); // Assign the day as the button ID

            // Create the key for the date (use the full date format to store state)
            String key = currentMonth.getYear() + "-" + currentMonth.getMonth().name() + "-" + day;

            // Check if trackerId is valid before loading state
            ButtonState state = loadButtonState(key, tracker.getTrackerId());
            dayButton.setUserData(state);
            applyButtonState(dayButton, state);  // Apply the visual state (checked, crossed, etc.)

            // Set action for the button (to handle clicks)
            dayButton.setOnAction(e -> handleDayClick(dayButton, key, tracker));

            // Add the button to the grid at the appropriate position
            calendarGrid.add(dayButton, col, row);
        }

        // Add the calendar grid to the calendar pane
        calendarPane.getChildren().addAll(calendarGrid);
        return calendarPane;
    }

    @FXML
    private void handleYearSelection(ActionEvent event) {
        Integer selectedYear = yearDropdown.getValue();
        currentMonth = currentMonth.withYear(selectedYear);
        updateCalendar(currentMonth.getMonth().toString());
    }

    // Handles the month selection from the ListView
    @FXML
    public void handleMonthYearSelection(MouseEvent event) {
        String selectedMonth = monthListView.getSelectionModel().getSelectedItem();
        if (selectedMonth != null) {
            currentMonth = LocalDate.now().withMonth(Month.valueOf(selectedMonth.toUpperCase()).getValue()).withDayOfMonth(1);
            Integer selectedYear = yearDropdown.getValue();
            currentMonth = currentMonth.withYear(selectedYear);

            // Update the calendar label
            monthLabel.setText(currentMonth.getMonth().toString() + " " + currentMonth.getYear());

            // Update the calendar
            updateCalendar(currentMonth.getMonth().toString());
        }
    }

    private void updateCalendar(String month) {
        monthLabel.setText(month + " " + currentMonth.getYear());  // Set the current month and year label

        // Get the currently selected tab (the tracker)
        Tab selectedTab = tabPane.getSelectionModel().getSelectedItem();

        // Check if a tab is selected (tracker is loaded)
        if (selectedTab != null) {
            // Get the Tracker object associated with the selected tab
            Tracker tracker = (Tracker) selectedTab.getUserData();

            // Rebuild the calendar grid for the selected tracker
            AnchorPane newCalendarContent = createCalendarContent(tracker);

            // Get the existing tab content (which should be an AnchorPane)
            AnchorPane existingTabContent = (AnchorPane) selectedTab.getContent();

            // Clear the existing content and add the new content
            existingTabContent.getChildren().clear();
            existingTabContent.getChildren().add(newCalendarContent);

            // Position the new calendar content correctly
            AnchorPane.setTopAnchor(newCalendarContent, 50.0); // Adjust as needed
            AnchorPane.setLeftAnchor(newCalendarContent, 0.0);
            AnchorPane.setRightAnchor(newCalendarContent, 0.0);
        }
    }


    public void handleCreateNewTracker(ActionEvent actionEvent) {
        // Show a dialog for the user to input the new tracker name
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("New Tracker");
        dialog.setHeaderText("Create a new tracker");
        dialog.setContentText("Enter tracker name:");

        Optional<String> result = dialog.showAndWait();
        result.ifPresent(trackerName -> {
            // Create a new Tracker object and add it to the database
            Tracker newTracker = new Tracker(userId, trackerName);  // Create tracker instance
            newTracker.addNewTracker(userId, trackerName);  // Adds the new tracker to the database

            // Get the generated trackerId after insertion
            int trackerId = newTracker.getTrackerId();

            if (trackerId != -1) {  // If the trackerId is valid
                // Add the tracker to the UI (TabPane)
                Tab newTab = new Tab(trackerName);
                trackerMap.put(newTab, newTracker);
                tabPane.getTabs().add(newTab);  // Add the new tracker tab

                // Reload the user trackers to reflect the new one
                loadUserTrackers();
            } else {
                showAlert("Error", "Failed to create new tracker.");
            }
        });
    }
}
